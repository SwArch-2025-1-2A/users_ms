// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const changeUserName = `-- name: ChangeUserName :one
UPDATE "User"
SET "name" = $2
WHERE "id" = $1
RETURNING id, name, profile_pic
`

type ChangeUserNameParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) ChangeUserName(ctx context.Context, arg ChangeUserNameParams) (User, error) {
	row := q.db.QueryRow(ctx, changeUserName, arg.ID, arg.Name)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.ProfilePic)
	return i, err
}

const changeUserProfilePic = `-- name: ChangeUserProfilePic :one
UPDATE "User"
SET "profile_pic" = $2
WHERE "id" = $1
RETURNING id, name, profile_pic
`

type ChangeUserProfilePicParams struct {
	ID         uuid.UUID
	ProfilePic pgtype.Text
}

func (q *Queries) ChangeUserProfilePic(ctx context.Context, arg ChangeUserProfilePicParams) (User, error) {
	row := q.db.QueryRow(ctx, changeUserProfilePic, arg.ID, arg.ProfilePic)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.ProfilePic)
	return i, err
}

const changeUserProperties = `-- name: ChangeUserProperties :one
UPDATE "User"
SET "name" = $2,
    "profile_pic" = $3
WHERE "id" = $1
RETURNING id, name, profile_pic
`

type ChangeUserPropertiesParams struct {
	ID         uuid.UUID
	Name       string
	ProfilePic pgtype.Text
}

func (q *Queries) ChangeUserProperties(ctx context.Context, arg ChangeUserPropertiesParams) (User, error) {
	row := q.db.QueryRow(ctx, changeUserProperties, arg.ID, arg.Name, arg.ProfilePic)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.ProfilePic)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "User" ("id", "name", "profile_pic")
VALUES ($1, $2, $3)
RETURNING id, name, profile_pic
`

type CreateUserParams struct {
	ID         uuid.UUID
	Name       string
	ProfilePic pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Name, arg.ProfilePic)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.ProfilePic)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, profile_pic
FROM "User"
WHERE "id" = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.ProfilePic)
	return i, err
}
