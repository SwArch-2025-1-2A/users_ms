// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO "Category"("category")
VALUES ($1)
RETURNING id, category, created_at, updated_at, deleted_at
`

func (q *Queries) CreateCategory(ctx context.Context, category string) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, category)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCategoriesById = `-- name: GetCategoriesById :many
SELECT id, category, created_at, updated_at, deleted_at FROM "Category"
WHERE "deleted_at" IS NULL
ORDER BY "category"
`

func (q *Queries) GetCategoriesById(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategoriesById)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT id, category, created_at, updated_at, deleted_at FROM "Category"
WHERE "deleted_at" IS NULL AND "id" = $1
`

func (q *Queries) GetCategoryById(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryById, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteCategory = `-- name: SoftDeleteCategory :one
UPDATE "Category"
SET "deleted_at" = now()
WHERE "id" = $1
RETURNING id, category, created_at, updated_at, deleted_at
`

func (q *Queries) SoftDeleteCategory(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, softDeleteCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
