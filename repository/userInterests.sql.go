// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: userInterests.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addUserInterest = `-- name: AddUserInterest :one
INSERT INTO "UserInterests"("user_id", "interest_id")
VALUES ($1, $2)
RETURNING user_id, interest_id
`

type AddUserInterestParams struct {
	UserID     uuid.UUID
	InterestID uuid.UUID
}

func (q *Queries) AddUserInterest(ctx context.Context, arg AddUserInterestParams) (UserInterest, error) {
	row := q.db.QueryRow(ctx, addUserInterest, arg.UserID, arg.InterestID)
	var i UserInterest
	err := row.Scan(&i.UserID, &i.InterestID)
	return i, err
}

const getUserInterests = `-- name: GetUserInterests :many
SELECT c.id, c.category, c.created_at, c.updated_at, c.deleted_at
FROM "UserInterests" as ui
  JOIN "Category" as c
  ON ui.interest_id = c.id
WHERE ui.user_id = $1
  AND c.deleted_at IS NULL
`

func (q *Queries) GetUserInterests(ctx context.Context, userID uuid.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, getUserInterests, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserInterest = `-- name: RemoveUserInterest :exec
DELETE FROM "UserInterests"
WHERE "user_id" = $1
  AND "interest_id" = $2
`

type RemoveUserInterestParams struct {
	UserID     uuid.UUID
	InterestID uuid.UUID
}

func (q *Queries) RemoveUserInterest(ctx context.Context, arg RemoveUserInterestParams) error {
	_, err := q.db.Exec(ctx, removeUserInterest, arg.UserID, arg.InterestID)
	return err
}
